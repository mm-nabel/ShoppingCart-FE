{"ast":null,"code":"var _jsxFileName = \"D:\\\\Data\\\\Development\\\\React\\\\Project\\\\Frontend\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from 'react-router-dom';\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport throttle from 'lodash/throttle';\nimport rootReducer, { initialState } from './components/reducers/rootReducer';\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {// Ignore write error.\n  }\n};\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return initialState;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return initialState;\n  }\n};\n\nconst store = createStore(rootReducer, loadState());\nstore.subscribe(throttle(() => {\n  saveState(store.getState());\n}, 1000));\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 29\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 44\n  }\n})))), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["D:/Data/Development/React/Project/Frontend/src/index.js"],"names":["React","ReactDOM","BrowserRouter","App","Provider","createStore","throttle","rootReducer","initialState","serviceWorker","saveState","state","serializedState","JSON","stringify","localStorage","setItem","err","loadState","getItem","parse","store","subscribe","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,WAAP,IAAsBC,YAAtB,QAA0C,mCAA1C;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,MAAI;AACF,UAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,eAA9B;AACD,GAHD,CAGE,OAAOK,GAAP,EAAY,CACZ;AACD;AACF,CAPD;;AASA,MAAMC,SAAS,GAAG,MAAM;AACtB,MAAI;AACF,UAAMN,eAAe,GAAGG,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAxB;;AACA,QAAIP,eAAe,KAAK,IAAxB,EAA8B;AAC5B,aAAOJ,YAAP;AACD;;AACD,WAAOK,IAAI,CAACO,KAAL,CAAWR,eAAX,CAAP;AACD,GAND,CAME,OAAOK,GAAP,EAAY;AACZ,WAAOT,YAAP;AACD;AACF,CAVD;;AAYA,MAAMa,KAAK,GAAGhB,WAAW,CAACE,WAAD,EAAcW,SAAS,EAAvB,CAAzB;AAEAG,KAAK,CAACC,SAAN,CACEhB,QAAQ,CAAC,MAAM;AACbI,EAAAA,SAAS,CAACW,KAAK,CAACE,QAAN,EAAD,CAAT;AACD,CAFO,EAEL,IAFK,CADV;AAMAtB,QAAQ,CAACuB,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAwB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAf,CAAxB,CADF,CADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport throttle from 'lodash/throttle'\r\nimport rootReducer, { initialState } from './components/reducers/rootReducer';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    // Ignore write error.\r\n  }\r\n}\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return initialState\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return initialState\r\n  }\r\n}\r\n\r\nconst store = createStore(rootReducer, loadState());\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState(store.getState())\r\n  }, 1000)\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}